import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.Socket;
import java.util.Map;
import java.util.concurrent.ConcurrentLinkedQueue;

import org.json.simple.JSONValue;

public class Client {
	
	Socket socket;
	BufferedReader input;
	OutputStreamWriter out;
	ConcurrentLinkedQueue<Object> updates;

	public Client(Socket socket) {
		updates = new ConcurrentLinkedQueue<Object>();
		try {
			input = new BufferedReader(new InputStreamReader(socket.getInputStream()));
			out = new OutputStreamWriter(socket.getOutputStream());
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public void start() {
		new Thread(() -> readUpdatesFromServer()).start();
		new Thread(() -> runClientLoop()).start();
	}
	
	public void readUpdatesFromServer() {
		String nextLine;
		try {
			while ((nextLine = input.readLine()) != null) {
				Map<String, Object> json = (Map<String, Object>) JSONValue.parse(nextLine.trim());
			}
		} catch (IOException e) {
			// exit thread
		}
		
	}

	public void runClientLoop() {
		try {
			while (true) {
				processUpdatesFromServer();
				sendCommandsToServer();
			}
		} catch (Exception e) {
		}
		try {
			socket.close();
		} catch (IOException e1) {
			e1.printStackTrace();
		}
	}

	private void sendCommandsToServer() {
		
	}

	private void processUpdatesFromServer() {
		
	}

}
